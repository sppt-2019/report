#! /bin/bash

# Separate the filename and extension
IFS='.' read -r target extension _ <<<"$1"
[[ $target ]] || { echo "File name invalid." >&2; exit 1; }
if [[ $extension && $extension != "tex" ]] ; then
	echo "File extensions: $extension not supported." >&2
	exit 1
fi

# Output directory
build="build"

# Progress pretty printing
zero="|                    | (00%)      \r"
twentyfive="|#####               | (25%)      \r"
thirty="|#######             | (33%)      \r"
fifty="|##########          | (50%)      \r"
sixtysix="|#############       | (66%)      \r"
seventyfive="|###############     | (75%)      \r"
hundred="|####################| (100%)     \n"

# General pretty printing
dashed="---------------------------------------"
solid="_______________________________________"
red="\033[0;31m"
yellow="\033[1;33m"
green="\033[0;32m"
clear="\033[0m"

# pdflatex arguements
args="-shell-escape -interaction=nonstopmode -output-directory=$build"

# Functions
function help {
	echo "compile-latex use"
	echo  "$dashed"
	echo "'compile-latex [FILE, FILE.tex] compiles the file tree times with pdflatex and once with bibtex"
	echo "$dashed"
	echo "Arguements"
	echo "$dashed"
	echo "'-h' displays this help message"
	echo "'-q' option or quick mode, compiles the given file twice with pdflatex"
	echo "'-rq' option or really quick mode, compiles the given file with pdflatex once"
}

function clear {
	# Clear output directory
	if [ -e "$build" ] ; then
	    rm -rf $build
	    mkdir $build
	else
	    mkdir $build
	fi

	# Clear log file, maybe this is unnecessary
	if [ -e latex.log ] ; then
	    rm "latex.log"
	fi
	touch "latex.log"
}

function output {
	echo "$solid"
	if [ -e "$build/$target.pdf" ] ; then
		cp "$build/$target.pdf" .
		printf "${green}Build succeed in $duration seconds!${clear}\n"
	else
		printf "${red}Build failed in $(( SECONDS - start )) seconds!${clear}\n"
	fi
	echo "$solid"
	printf "${red}"
	echo "Errors"
	echo "$dashed"
	cat latex.log | grep -n "Error"
	printf "${clear}"

	echo "$solid"
	printf "${yellow}"
	echo "Warnings"
	echo "$dashed"
	cat latex.log | grep -n "Warning"
	printf "${clear}"
}

function compile {
	echo "$solid"
	if [ $# == 2 ] ; then
		if [ $2 == "-h" || $2 == "--help" ] ; then
			help
	    	elif [ $2 == "-q" || $2 == "--quick" ] ; then
			quick
			output
		elif [ $2 == "-rq" || $2 == "--really-quick" ] ; then
			really-quick
			output
     	fi
	elif [ $1 == "-h" ] ; then
		help
	else
		full
		output
	fi
	echo "$solid"
	exit 0
}

function full {
    start=$SECONDS
    echo -ne "Compiling $zero"
    pdflatex $args "$target.tex" > "latex.log"
    echo -ne "Compiling $twentyfive"
    biber "$build/$target.bcf" > "latex.log"
    echo -ne "Compiling $fifty"
    pdflatex $args "$target.tex" > "latex.log"
    echo -ne "Compiling $seventyfive"
    pdflatex $args "$target.tex" > "latex.log"
    echo -ne "Compiling $hundred"
    duration=$(( SECONDS - start ))
}

function quick {
	start=$SECONDS
	echo -ne "Compiling $zero"
	pdflatex $args "$target.tex" > "latex.log"
	echo -ne "Compiling $fifty"
	pdflatex $args "$target.tex" > "latex.log"
	echo -ne "Compiling $hundred"
        duration=$(( SECONDS - start ))
}

function really-quick {
         start=$SECONDS
         echo -ne "Compiling $zero"
         pdflatex $args "$target.tex" > "latex.log"
         echo -ne "Compiling $hundred"
         duration=$(( SECONDS - start ))
}

function present {
	if [ ! -f "$target.tex" ] ; then
		return 1
	else
		return 0
	fi
}

function main {
	if present ; then
		clear
		if [ $# == 2 ] ; then
			compile $1 $2
		else
			compile $1
		fi
	else
		echo "$1 is not a valid source file."
		exit 1
	fi
}

# Main script behaviour	
main $@
